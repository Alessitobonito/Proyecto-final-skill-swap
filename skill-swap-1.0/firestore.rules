rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidSkill(skill) {
      return skill.name is string && 
             skill.name.size() > 0 && 
             skill.name.size() <= 100 &&
             skill.description is string &&
             skill.description.size() <= 500 &&
             skill.level in ['beginner', 'intermediate', 'advanced'] &&
             skill.category is string &&
             skill.category.size() > 0 &&
             skill.userId == request.auth.uid;
    }

    // Reglas para la colección de skills
    match /skills/{skillId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidSkill(request.resource.data);
      allow update: if isOwner(resource.data.userId) && isValidSkill(request.resource.data);
      allow delete: if isOwner(resource.data.userId);
    }

    // Reglas para la colección de chats
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
                    request.auth.uid in request.resource.data.participants &&
                    request.resource.data.participants.size() == 2;
      allow update: if isAuthenticated() && 
                    request.auth.uid in resource.data.participants &&
                    request.resource.data.participants == resource.data.participants;
    }

    // Reglas para los perfiles de usuario
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId) &&
                             request.resource.data.keys().hasOnly(['displayName', 'email', 'bio', 'photoURL']) &&
                             request.resource.data.displayName is string &&
                             request.resource.data.displayName.size() <= 50 &&
                             request.resource.data.email == request.auth.token.email &&
                             (!('bio' in request.resource.data) || request.resource.data.bio.size() <= 300) &&
                             (!('photoURL' in request.resource.data) || request.resource.data.photoURL.matches('https?://.*'));
    }

    // Reglas para la colección de reseñas
    match /reviews/{reviewId} {
      allow read: if isAuthenticated(); // Cualquier usuario autenticado puede leer reseñas
      allow create: if isAuthenticated(); // Cualquier usuario autenticado puede crear reseñas
      allow delete: if isOwner(resource.data.reviewerId); // Solo el revisor puede eliminar su reseña
    }
  }
}